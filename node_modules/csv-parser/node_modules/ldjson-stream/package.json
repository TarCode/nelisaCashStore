{
  "name": "ldjson-stream",
  "version": "1.2.1",
  "description": "streaming line delimited json parser + serializer",
  "main": "index.js",
  "scripts": {
    "test": "tape test.js"
  },
  "author": {
    "name": "max ogden"
  },
  "license": "BSD",
  "dependencies": {
    "split2": "^0.2.1",
    "through2": "^0.6.1"
  },
  "devDependencies": {
    "tape": "^2.13.3"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/maxogden/ldjson-stream.git"
  },
  "bugs": {
    "url": "https://github.com/maxogden/ldjson-stream/issues"
  },
  "readme": "# ldjson-stream\n\n#### streaming line delimited json parser + serializer\n\n[![NPM](https://nodei.co/npm/ldjson-stream.png)](https://nodei.co/npm/ldjson-stream/)\n\n## usage\n\n```\nvar ldj = require('ldjson-stream')\n```\n\n#### ldj.parse()\n\nreturns a transform stream that accepts newline delimited json and emits objects\n\nexample newline delimited json:\n\n`data.txt`:\n\n```\n{\"foo\": \"bar\"}\n{\"hello\": \"world\"}\n```\n\nIf you want to discard non-valid JSON messages, you can call `ldj.parse({strict: false})`\n\nusage:\n\n```js\nfs.createReadStream('data.txt')\n  .pipe(ldj.parse())\n  .on('data', function(obj) {\n    // obj is a javascript object\n  })\n```\n\n#### ldj.serialize()\n\nreturns a transform stream that accepts json objects and emits newline delimited json\n\nexample usage:\n\n```js\nvar serialize = ldj.serialize()\nserialize.on('data', function(line) {\n  // line is a line of stringified JSON with a newline delimiter at the end\n})\nserialize.write({\"foo\": \"bar\"})\nserialize.end()\n```\n\n### license\n\nBSD\n",
  "readmeFilename": "readme.md",
  "_id": "ldjson-stream@1.2.1",
  "dist": {
    "shasum": "d6c6d28d73a5ac63fcc3f7fc7ae736c9203f8812"
  },
  "_from": "ldjson-stream@^1.1.0",
  "_resolved": "https://registry.npmjs.org/ldjson-stream/-/ldjson-stream-1.2.1.tgz"
}
